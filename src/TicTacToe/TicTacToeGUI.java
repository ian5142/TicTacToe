package TicTacToe;

import java.io.*;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/*
 * TicTacToeGUI.java
 *
 * Created on Jan 30, 2012, 9:40:03 AM
 * A Tic Tac Toe Game
 * For 1 or 2 Players 
 * 1 Player uses AIplayer class to create a move
 * Includes Game Counting and New Game functions
 * Also requires XComponent.java and CircleComponent.java to draw Xs and Os on the board. 
 * 
 * to compile: %javac TicTacToeGUI.java
 * to run: %java TicTacToeGUI
 * This program can be run on any java system (Linux, Mac, or Windows)
 * 
 * @author Ian Van Schaick
 */
public class TicTacToeGUI extends javax.swing.JFrame {

    /** Creates new form TicTacToeGUI */
    public TicTacToeGUI() {
        initComponents();
        numberP = JOptionPane.showInputDialog(null,"Enter number of players (1 or 2):");
        p1 = JOptionPane.showInputDialog(null,"Enter the name of player 1:");
        if (numberP.equals("2")) {
            p2 = JOptionPane.showInputDialog(null,"Enter the name of player 2:");
            jTextPane1.setText("For a 2-player game, player 1 click on one of the squares on the left, then player 2, and so on. A box will open on the bottom if a player wins or it is a tie.");
        }
        else {
            p2 = "Computer";
            jTextPane1.setText("For a 1-player game, player 1 click on one of the squares on the left, then the computer goes, then click on another square, and so on. A box will open on the bottom if a player wins or it is a tie.");
            numberP = "1";
            ReadUserStats();
            
        }
        
        if (jLabel2.getText().equals("jLabel2") ) {
            jLabel2.setText(p1 + ": ");
            jLabel3.setText(p2 + ": ");
            //Call File Writer with p1 0 0 0
        }
        
        jLabel4.setText("<html><u>Instructions</u></html>");
        jComboBox1.setSelectedIndex(1);
        
        
        try{
            setIconImage( new ImageIcon( this.getClass().getResource("/TicTacToe/images/image.GIF" ) ).getImage() ); 
        } catch(Exception e){
            System.out.println(e);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();

        jRadioButton1.setText("jRadioButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tic Tac Toe");
        setName("Tic Tac Toe"); // NOI18N
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel2MouseClicked(evt);
            }
        });
        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel3MouseClicked(evt);
            }
        });
        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel4MouseClicked(evt);
            }
        });
        jPanel4.setLayout(new java.awt.GridLayout(1, 0));

        jPanel5.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel5MouseClicked(evt);
            }
        });
        jPanel5.setLayout(new java.awt.GridLayout(1, 0));

        jPanel6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel6MouseClicked(evt);
            }
        });
        jPanel6.setLayout(new java.awt.GridLayout(1, 0));

        jPanel7.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel7MouseClicked(evt);
            }
        });
        jPanel7.setLayout(new java.awt.GridLayout(1, 0));

        jPanel8.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel8MouseClicked(evt);
            }
        });
        jPanel8.setLayout(new java.awt.GridLayout(1, 0));

        jPanel9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel9MouseClicked(evt);
            }
        });
        jPanel9.setLayout(new java.awt.GridLayout(1, 0));

        jPanel10.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel10.setPreferredSize(new java.awt.Dimension(4, 4));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jButton2.setText("Close");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("New Game");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Game Count: ");

        jLabel2.setText("jLabel2");

        jLabel3.setText("jLabel3");

        jScrollPane1.setViewportView(jTextPane1);

        jLabel4.setText("jLabel4");

        jLabel5.setText("Tie Count: ");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Easy", "Medium", "Insane" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(91, 91, 91)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(jButton1)
                                    .addComponent(jButton2))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(94, 94, 94))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (!(a1 == 'S' && a2 == 'S' && a3 == 'S' && b1 == 'S' && b2 == 'S' && b3 == 'S' && c1 == 'S' && c2 == 'S' && c3 == 'S')) {
            clearDraw(jPanel1);
            clearDraw(jPanel2);
            clearDraw(jPanel3);
            
            clearDraw(jPanel4);
            clearDraw(jPanel5);
            clearDraw(jPanel6);
            
            clearDraw(jPanel7);
            clearDraw(jPanel8);
            clearDraw(jPanel9);
            
            gameCount += 1;
            jLabel1.setText("Game Count: " + gameCount);
            tieCount = gameCount - (winP1 + winP2);
            jLabel5.setText("Tie Count: " + tieCount);
            
            a1 = 'S';
            a2 = 'S';
            a3 = 'S';
            
            b1 = 'S';
            b2 = 'S';
            b3 = 'S';
            
            c1 = 'S';
            c2 = 'S';
            c3 = 'S';
            
            timea1 = new Timestamp (0);
            timea2 = new Timestamp (0);
            timea3 = new Timestamp (0);
            
            timeb1 = new Timestamp (0);
            timeb2 = new Timestamp (0);
            timeb3 = new Timestamp (0);
            
            timec1 = new Timestamp (0);
            timec2 = new Timestamp (0);
            timec3 = new Timestamp (0);
            
            jLabel2.setText(p1 + ": " + winP1);
            jLabel3.setText(p2 + ": " + winP2);
            win = false;
        }
        WriteUserStats ();
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
        clearDraw(jPanel1);
        
        panel = "jp1";
        
        CircleComponent cir = new CircleComponent(80);
        XComponent xcom = new XComponent();
        if (turn == 'O') {
            jPanel1.add(cir);
            a1 = 'O';
        }
        else if (turn == 'X') {
            jPanel1.add(xcom);
            a1 = 'X';
            timea1 = new Timestamp (Calendar.getInstance().getTime().getTime());
        }
        
        jPanel1.revalidate();
        jPanel1.repaint();
        CheckWin();
        
        switch (numberP) {
            case "2":
                if (turn == 'X') {
                    turn = 'O';
                }
                else if (turn == 'O') {
                    turn = 'X';
                }
                if (win == false) {
                    if (turn == 'X') {
                        JOptionPane.showMessageDialog(jPanel5,"It is " + p1 + "'s turn.");
                    }
                    else if (turn == 'O') {
                        JOptionPane.showMessageDialog(jPanel5,"It is " + p2 + "'s turn.");
                    }
                }
                break;
            case "1":
                String move = "";
                if (diffic.equals("med")) {
                    AIplayerMed ai = new AIplayerMed (a1, a2, a3, b1, b2, b3, c1, c2, c3);
                    move = ai.BestMove();
                }
                else if (diffic.equals("easy")) {
                    AIplayerEasy ai2 = new AIplayerEasy (a1, a2, a3, b1, b2, b3, c1, c2, c3);
                    move = ai2.BestMove();
                }
                else if (diffic.equals("hard")) {
                    AIplayerHard ai3 = new AIplayerHard (a1, a2, a3, b1, b2, b3, c1, c2, c3, timea1, timea2, timea3, timeb1, timeb2, timeb3, timec1, timec2, timec3);
                    move = ai3.BestMove();
                }
                
                if (move.equals("a1")) {
                    a1 = 'O';
                    jPanel1.add(cir);
                    jPanel1.revalidate();
                    jPanel1.repaint();
                    timea1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("a2")) {
                    a2 = 'O';
                    jPanel2.add(cir);
                    jPanel2.revalidate();
                    jPanel2.repaint();
                    timea2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("a3")) {
                    a3 = 'O';
                    jPanel3.add(cir);
                    jPanel3.revalidate();
                    jPanel3.repaint();
                    timea3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b1")) {
                    b1 = 'O';
                    jPanel4.add(cir);
                    jPanel4.revalidate();
                    jPanel4.repaint();
                    timeb1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b2")) {
                    b2 = 'O';
                    jPanel5.add(cir);
                    jPanel5.revalidate();
                    jPanel5.repaint();
                    timeb2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b3")) {
                    b3 = 'O';
                    jPanel6.add(cir);
                    jPanel6.revalidate();
                    jPanel6.repaint();
                    timeb3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c1")) {
                    c1 = 'O';
                    jPanel7.add(cir);
                    jPanel7.revalidate();
                    jPanel7.repaint();
                    timec1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c2")) {
                    c2 = 'O';
                    jPanel8.add(cir);
                    jPanel8.revalidate();
                    jPanel8.repaint();
                    timec2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c3")) {
                    c3 = 'O';
                    jPanel9.add(cir);
                    jPanel9.revalidate();
                    jPanel9.repaint();
                    timec3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("full")) {
                    
                }
                turn = 'O';
                if (win == false) {
                    CheckWin();
                }
                turn = 'X';
                if (move.equals("full") && win == false) {
                    JOptionPane.showMessageDialog(jPanel10,"It is a tie.");
                }
                break;
        }
    }//GEN-LAST:event_jPanel1MouseClicked

    private void jPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseClicked
        // TODO add your handling code here:
        clearDraw(jPanel2);
        
        panel = "jp2";
        
        CircleComponent cir = new CircleComponent(80);
        XComponent xcom = new XComponent();
        if (turn == 'O') {
            jPanel2.add(cir);
            a2 = 'O';
        }
        else if (turn == 'X') {
            jPanel2.add(xcom);
            a2 = 'X';
            timea2 = new Timestamp (Calendar.getInstance().getTime().getTime());
        }
        
        jPanel2.revalidate();
        jPanel2.repaint();
        CheckWin();
        switch (numberP) {
            case "2":
                if (turn == 'X') {
                    turn = 'O';
                }
                else if (turn == 'O') {
                    turn = 'X';
                }
                if (win == false) {
                    if (turn == 'X') {
                        JOptionPane.showMessageDialog(jPanel5,"It is " + p1 + "'s turn.");
                    }
                    else if (turn == 'O') {
                        JOptionPane.showMessageDialog(jPanel5,"It is " + p2 + "'s turn.");
                    }
                }
                break;
            case "1":
                String move = "";
                if (diffic.equals("med")) {
                    AIplayerMed ai = new AIplayerMed (a1, a2, a3, b1, b2, b3, c1, c2, c3);
                    move = ai.BestMove();
                }
                else if (diffic.equals("easy")) {
                    AIplayerEasy ai2 = new AIplayerEasy (a1, a2, a3, b1, b2, b3, c1, c2, c3);
                    move = ai2.BestMove();
                }
                else if (diffic.equals("hard")) {
                    AIplayerHard ai3 = new AIplayerHard (a1, a2, a3, b1, b2, b3, c1, c2, c3, timea1, timea2, timea3, timeb1, timeb2, timeb3, timec1, timec2, timec3);
                    move = ai3.BestMove();
                }
                
                if (move.equals("a1")) {
                    a1 = 'O';
                    jPanel1.add(cir);
                    jPanel1.revalidate();
                    jPanel1.repaint();
                    timea1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("a2")) {
                    a2 = 'O';
                    jPanel2.add(cir);
                    jPanel2.revalidate();
                    jPanel2.repaint();
                    timea2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("a3")) {
                    a3 = 'O';
                    jPanel3.add(cir);
                    jPanel3.revalidate();
                    jPanel3.repaint();
                    timea3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b1")) {
                    b1 = 'O';
                    jPanel4.add(cir);
                    jPanel4.revalidate();
                    jPanel4.repaint();
                    timeb1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b2")) {
                    b2 = 'O';
                    jPanel5.add(cir);
                    jPanel5.revalidate();
                    jPanel5.repaint();
                    timeb2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b3")) {
                    b3 = 'O';
                    jPanel6.add(cir);
                    jPanel6.revalidate();
                    jPanel6.repaint();
                    timeb3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c1")) {
                    c1 = 'O';
                    jPanel7.add(cir);
                    jPanel7.revalidate();
                    jPanel7.repaint();
                    timec1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c2")) {
                    c2 = 'O';
                    jPanel8.add(cir);
                    jPanel8.revalidate();
                    jPanel8.repaint();
                    timec2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c3")) {
                    c3 = 'O';
                    jPanel9.add(cir);
                    jPanel9.revalidate();
                    jPanel9.repaint();
                    timec3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("full")) {
                    
                }
                turn = 'O';
                if (win == false)
                CheckWin();
                turn = 'X';
                if (move.equals("full") && win == false) {
                    JOptionPane.showMessageDialog(jPanel10,"It is a tie.");
                }
                break;
        }
    }//GEN-LAST:event_jPanel2MouseClicked

    private void jPanel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseClicked
        // TODO add your handling code here:
        clearDraw(jPanel3);
        
        panel = "jp3";
        
        CircleComponent cir = new CircleComponent(80);
        XComponent xcom = new XComponent();
        if (turn == 'O') {
            jPanel3.add(cir);
            a3 = 'O';
        }
        else if (turn == 'X') {
            jPanel3.add(xcom);
            a3 = 'X';
            timea3 = new Timestamp (Calendar.getInstance().getTime().getTime());
        }
         
        jPanel3.revalidate();
        jPanel3.repaint();
        CheckWin();
        switch (numberP) {
            case "2":
                if (turn == 'X') {
                    turn = 'O';
                }
                else if (turn == 'O') {
                    turn = 'X';
                }
                if (win == false) {
                    if (turn == 'X') {
                        JOptionPane.showMessageDialog(jPanel5,"It is " + p1 + "'s turn.");
                    }
                    else if (turn == 'O') {
                        JOptionPane.showMessageDialog(jPanel5,"It is " + p2 + "'s turn.");
                    }
                }
                break;
            case "1":
                String move = "";
                if (diffic.equals("med")) {
                    AIplayerMed ai = new AIplayerMed (a1, a2, a3, b1, b2, b3, c1, c2, c3);
                    move = ai.BestMove();
                }
                else if (diffic.equals("easy")) {
                    AIplayerEasy ai2 = new AIplayerEasy (a1, a2, a3, b1, b2, b3, c1, c2, c3);
                    move = ai2.BestMove();
                }
                else if (diffic.equals("hard")) {
                    AIplayerHard ai3 = new AIplayerHard (a1, a2, a3, b1, b2, b3, c1, c2, c3, timea1, timea2, timea3, timeb1, timeb2, timeb3, timec1, timec2, timec3);
                    move = ai3.BestMove();
                }
                
                if (move.equals("a1")) {
                    a1 = 'O';
                    jPanel1.add(cir);
                    jPanel1.revalidate();
                    jPanel1.repaint();
                    timea1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("a2")) {
                    a2 = 'O';
                    jPanel2.add(cir);
                    jPanel2.revalidate();
                    jPanel2.repaint();
                    timea2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("a3")) {
                    a3 = 'O';
                    jPanel3.add(cir);
                    jPanel3.revalidate();
                    jPanel3.repaint();
                    timea3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b1")) {
                    b1 = 'O';
                    jPanel4.add(cir);
                    jPanel4.revalidate();
                    jPanel4.repaint();
                    timeb1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b2")) {
                    b2 = 'O';
                    jPanel5.add(cir);
                    jPanel5.revalidate();
                    jPanel5.repaint();
                    timeb2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b3")) {
                    b3 = 'O';
                    jPanel6.add(cir);
                    jPanel6.revalidate();
                    jPanel6.repaint();
                    timeb3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c1")) {
                    c1 = 'O';
                    jPanel7.add(cir);
                    jPanel7.revalidate();
                    jPanel7.repaint();
                    timec1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c2")) {
                    c2 = 'O';
                    jPanel8.add(cir);
                    jPanel8.revalidate();
                    jPanel8.repaint();
                    timec2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c3")) {
                    c3 = 'O';
                    jPanel9.add(cir);
                    jPanel9.revalidate();
                    jPanel9.repaint();
                    timec3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("full")) {
                    
                }
                turn = 'O';
                if (win == false) {
                    CheckWin();
                }
                turn = 'X';
                if (move.equals("full") && win == false) {
                    JOptionPane.showMessageDialog(jPanel10,"It is a tie.");
                }
                break;
        }
    }//GEN-LAST:event_jPanel3MouseClicked

    private void jPanel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseClicked
        // TODO add your handling code here:
        clearDraw(jPanel4);
        
        panel = "jp4";
        
        CircleComponent cir = new CircleComponent(80);
        XComponent xcom = new XComponent();
        if (turn == 'O') {
            jPanel4.add(cir);
            b1 = 'O';
        }
        else if (turn == 'X') {
            jPanel4.add(xcom);
            b1 = 'X';
            timeb1 = new Timestamp (Calendar.getInstance().getTime().getTime());
        }
        
        jPanel4.revalidate();
        jPanel4.repaint();
        CheckWin();
        switch (numberP) {
            case "2":
                if (turn == 'X') {
                    turn = 'O';
                }
                else if (turn == 'O') {
                    turn = 'X';
                }
                if (win == false) {
                    if (turn == 'X') {
                        JOptionPane.showMessageDialog(jPanel5,"It is " + p1 + "'s turn.");
                    }
                    else if (turn == 'O') {
                        JOptionPane.showMessageDialog(jPanel5,"It is " + p2 + "'s turn.");
                    }
                }
                break;
            case "1":
                String move = "";
                if (diffic.equals("med")) {
                    AIplayerMed ai = new AIplayerMed (a1, a2, a3, b1, b2, b3, c1, c2, c3);
                    move = ai.BestMove();
                }
                else if (diffic.equals("easy")) {
                    AIplayerEasy ai2 = new AIplayerEasy (a1, a2, a3, b1, b2, b3, c1, c2, c3);
                    move = ai2.BestMove();
                }
                else if (diffic.equals("hard")) {
                    AIplayerHard ai3 = new AIplayerHard (a1, a2, a3, b1, b2, b3, c1, c2, c3, timea1, timea2, timea3, timeb1, timeb2, timeb3, timec1, timec2, timec3);
                    move = ai3.BestMove();
                }
                
                if (move.equals("a1")) {
                    a1 = 'O';
                    jPanel1.add(cir);
                    jPanel1.revalidate();
                    jPanel1.repaint();
                    timea1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("a2")) {
                    a2 = 'O';
                    jPanel2.add(cir);
                    jPanel2.revalidate();
                    jPanel2.repaint();
                    timea2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("a3")) {
                    a3 = 'O';
                    jPanel3.add(cir);
                    jPanel3.revalidate();
                    jPanel3.repaint();
                    timea3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b1")) {
                    b1 = 'O';
                    jPanel4.add(cir);
                    jPanel4.revalidate();
                    jPanel4.repaint();
                    timeb1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b2")) {
                    b2 = 'O';
                    jPanel5.add(cir);
                    jPanel5.revalidate();
                    jPanel5.repaint();
                    timeb2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b3")) {
                    b3 = 'O';
                    jPanel6.add(cir);
                    jPanel6.revalidate();
                    jPanel6.repaint();
                    timeb3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c1")) {
                    c1 = 'O';
                    jPanel7.add(cir);
                    jPanel7.revalidate();
                    jPanel7.repaint();
                    timec1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c2")) {
                    c2 = 'O';
                    jPanel8.add(cir);
                    jPanel8.revalidate();
                    jPanel8.repaint();
                    timec2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c3")) {
                    c3 = 'O';
                    jPanel9.add(cir);
                    jPanel9.revalidate();
                    jPanel9.repaint();
                    timec3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("full")) {
                    
                }
                turn = 'O';
                if (win == false) {
                    CheckWin();
                }
                turn = 'X';
                if (move.equals("full") && win == false) {
                    JOptionPane.showMessageDialog(jPanel10,"It is a tie.");
                }
                break;
        }
    }//GEN-LAST:event_jPanel4MouseClicked

    private void jPanel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel5MouseClicked
        // TODO add your handling code here:
        clearDraw(jPanel5);
        
        panel = "jp5";
        
        CircleComponent cir = new CircleComponent(80);
        XComponent xcom = new XComponent();
        if (turn == 'O') {
            jPanel5.add(cir);
            b2 = 'O';
        }
        else if (turn == 'X') {
            jPanel5.add(xcom);
            b2 = 'X';
            timeb2 = new Timestamp (Calendar.getInstance().getTime().getTime());
        }
        
        jPanel5.revalidate();
        jPanel5.repaint();
        CheckWin();
        switch (numberP) {
            case "2":
                if (turn == 'X') {
                    turn = 'O';
                }
                else if (turn == 'O') {
                    turn = 'X';
                }
                if (win == false) {
                    if (turn == 'X') {
                        JOptionPane.showMessageDialog(jPanel5,"It is " + p1 + "'s turn.");
                    }
                    else if (turn == 'O') {
                        JOptionPane.showMessageDialog(jPanel5,"It is " + p2 + "'s turn.");
                    }
                }
                break;
            case "1":
                String move = "";
                if (diffic.equals("med")) {
                    AIplayerMed ai = new AIplayerMed (a1, a2, a3, b1, b2, b3, c1, c2, c3);
                    move = ai.BestMove();
                }
                else if (diffic.equals("easy")) {
                    AIplayerEasy ai2 = new AIplayerEasy (a1, a2, a3, b1, b2, b3, c1, c2, c3);
                    move = ai2.BestMove();
                }
                else if (diffic.equals("hard")) {
                    AIplayerHard ai3 = new AIplayerHard (a1, a2, a3, b1, b2, b3, c1, c2, c3, timea1, timea2, timea3, timeb1, timeb2, timeb3, timec1, timec2, timec3);
                    move = ai3.BestMove();
                }
                
                if (move.equals("a1")) {
                    a1 = 'O';
                    jPanel1.add(cir);
                    jPanel1.revalidate();
                    jPanel1.repaint();
                    timea1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("a2")) {
                    a2 = 'O';
                    jPanel2.add(cir);
                    jPanel2.revalidate();
                    jPanel2.repaint();
                    timea2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("a3")) {
                    a3 = 'O';
                    jPanel3.add(cir);
                    jPanel3.revalidate();
                    jPanel3.repaint();
                    timea3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b1")) {
                    b1 = 'O';
                    jPanel4.add(cir);
                    jPanel4.revalidate();
                    jPanel4.repaint();
                    timeb1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b2")) {
                    b2 = 'O';
                    jPanel5.add(cir);
                    jPanel5.revalidate();
                    jPanel5.repaint();
                    timeb2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b3")) {
                    b3 = 'O';
                    jPanel6.add(cir);
                    jPanel6.revalidate();
                    jPanel6.repaint();
                    timeb3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c1")) {
                    c1 = 'O';
                    jPanel7.add(cir);
                    jPanel7.revalidate();
                    jPanel7.repaint();
                    timec1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c2")) {
                    c2 = 'O';
                    jPanel8.add(cir);
                    jPanel8.revalidate();
                    jPanel8.repaint();
                    timec2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c3")) {
                    c3 = 'O';
                    jPanel9.add(cir);
                    jPanel9.revalidate();
                    jPanel9.repaint();
                    timec3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("full")) {
                    
                }
                turn = 'O';
                if (win == false) {
                    CheckWin();
                }
                turn = 'X';
                if (move.equals("full") && win == false) {
                    JOptionPane.showMessageDialog(jPanel10,"It is a tie.");
                }
                break;
        }
    }//GEN-LAST:event_jPanel5MouseClicked

    private void jPanel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel6MouseClicked
        // TODO add your handling code here:
        clearDraw(jPanel6);
        
        panel = "jp6";
        
        CircleComponent cir = new CircleComponent(80);
        XComponent xcom = new XComponent();
        if (turn == 'O') {
            jPanel6.add(cir);
            b3 = 'O';
        }
        else if (turn == 'X') {
            jPanel6.add(xcom);
            b3 = 'X';
            timeb3 = new Timestamp (Calendar.getInstance().getTime().getTime());
        }
        
        jPanel6.revalidate();
        jPanel6.repaint();
        CheckWin();
        switch (numberP) {
            case "2":
                if (turn == 'X') {
                    turn = 'O';
                }
                else if (turn == 'O') {
                    turn = 'X';
                }
                if (win == false) {
                    if (turn == 'X') {
                        JOptionPane.showMessageDialog(jPanel5,"It is " + p1 + "'s turn.");
                    }
                    else if (turn == 'O') {
                        JOptionPane.showMessageDialog(jPanel5,"It is " + p2 + "'s turn.");
                    }
                }
                break;
            case "1":
                String move = "";
                if (diffic.equals("med")) {
                    AIplayerMed ai = new AIplayerMed (a1, a2, a3, b1, b2, b3, c1, c2, c3);
                    move = ai.BestMove();
                }
                else if (diffic.equals("easy")) {
                    AIplayerEasy ai2 = new AIplayerEasy (a1, a2, a3, b1, b2, b3, c1, c2, c3);
                    move = ai2.BestMove();
                }
                else if (diffic.equals("hard")) {
                    AIplayerHard ai3 = new AIplayerHard (a1, a2, a3, b1, b2, b3, c1, c2, c3, timea1, timea2, timea3, timeb1, timeb2, timeb3, timec1, timec2, timec3);
                    move = ai3.BestMove();
                }
                
                if (move.equals("a1")) {
                    a1 = 'O';
                    jPanel1.add(cir);
                    jPanel1.revalidate();
                    jPanel1.repaint();
                    timea1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("a2")) {
                    a2 = 'O';
                    jPanel2.add(cir);
                    jPanel2.revalidate();
                    jPanel2.repaint();
                    timea2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("a3")) {
                    a3 = 'O';
                    jPanel3.add(cir);
                    jPanel3.revalidate();
                    jPanel3.repaint();
                    timea3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b1")) {
                    b1 = 'O';
                    jPanel4.add(cir);
                    jPanel4.revalidate();
                    jPanel4.repaint();
                    timeb1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b2")) {
                    b2 = 'O';
                    jPanel5.add(cir);
                    jPanel5.revalidate();
                    jPanel5.repaint();
                    timeb2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b3")) {
                    b3 = 'O';
                    jPanel6.add(cir);
                    jPanel6.revalidate();
                    jPanel6.repaint();
                    timeb3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c1")) {
                    c1 = 'O';
                    jPanel7.add(cir);
                    jPanel7.revalidate();
                    jPanel7.repaint();
                    timec1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c2")) {
                    c2 = 'O';
                    jPanel8.add(cir);
                    jPanel8.revalidate();
                    jPanel8.repaint();
                    timec2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c3")) {
                    c3 = 'O';
                    jPanel9.add(cir);
                    jPanel9.revalidate();
                    jPanel9.repaint();
                    timec3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("full")) {
                    
                }
                turn = 'O';
                if (win == false) {
                    CheckWin();
                }
                turn = 'X';
                if (move.equals("full") && win == false) {
                    JOptionPane.showMessageDialog(jPanel10,"It is a tie.");
                }
                break;
        }
    }//GEN-LAST:event_jPanel6MouseClicked

    private void jPanel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel7MouseClicked
        // TODO add your handling code here:
        clearDraw(jPanel7);
        
        panel = "jp7";
        
        CircleComponent cir = new CircleComponent(80);
        XComponent xcom = new XComponent();
        if (turn == 'O') {
            jPanel7.add(cir);
            c1 = 'O';
        }
        else if (turn == 'X') {
            jPanel7.add(xcom);
            c1 = 'X';
            timec1 = new Timestamp (Calendar.getInstance().getTime().getTime());
        }
        
        jPanel7.revalidate();
        jPanel7.repaint();
        CheckWin();
        switch (numberP) {
            case "2":
                if (turn == 'X') {
                    turn = 'O';
                }
                else if (turn == 'O') {
                    turn = 'X';
                }
                if (win == false) {
                    if (turn == 'X') {
                        JOptionPane.showMessageDialog(jPanel5,"It is " + p1 + "'s turn.");
                    }
                    else if (turn == 'O') {
                        JOptionPane.showMessageDialog(jPanel5,"It is " + p2 + "'s turn.");
                    }
                }
                break;
            case "1":
                String move = "";
                if (diffic.equals("med")) {
                    AIplayerMed ai = new AIplayerMed (a1, a2, a3, b1, b2, b3, c1, c2, c3);
                    move = ai.BestMove();
                }
                else if (diffic.equals("easy")) {
                    AIplayerEasy ai2 = new AIplayerEasy (a1, a2, a3, b1, b2, b3, c1, c2, c3);
                    move = ai2.BestMove();
                }
                else if (diffic.equals("hard")) {
                    AIplayerHard ai3 = new AIplayerHard (a1, a2, a3, b1, b2, b3, c1, c2, c3, timea1, timea2, timea3, timeb1, timeb2, timeb3, timec1, timec2, timec3);
                    move = ai3.BestMove();
                }
                
                if (move.equals("a1")) {
                    a1 = 'O';
                    jPanel1.add(cir);
                    jPanel1.revalidate();
                    jPanel1.repaint();
                    timea1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("a2")) {
                    a2 = 'O';
                    jPanel2.add(cir);
                    jPanel2.revalidate();
                    jPanel2.repaint();
                    timea2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("a3")) {
                    a3 = 'O';
                    jPanel3.add(cir);
                    jPanel3.revalidate();
                    jPanel3.repaint();
                    timea3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b1")) {
                    b1 = 'O';
                    jPanel4.add(cir);
                    jPanel4.revalidate();
                    jPanel4.repaint();
                    timeb1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b2")) {
                    b2 = 'O';
                    jPanel5.add(cir);
                    jPanel5.revalidate();
                    jPanel5.repaint();
                    timeb2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b3")) {
                    b3 = 'O';
                    jPanel6.add(cir);
                    jPanel6.revalidate();
                    jPanel6.repaint();
                    timeb3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c1")) {
                    c1 = 'O';
                    jPanel7.add(cir);
                    jPanel7.revalidate();
                    jPanel7.repaint();
                    timec1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c2")) {
                    c2 = 'O';
                    jPanel8.add(cir);
                    jPanel8.revalidate();
                    jPanel8.repaint();
                    timec2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c3")) {
                    c3 = 'O';
                    jPanel9.add(cir);
                    jPanel9.revalidate();
                    jPanel9.repaint();
                    timec3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("full")) {
                    
                }
                turn = 'O';
                if (win == false) {
                    CheckWin();
                }
                turn = 'X';
                if (move.equals("full") && win == false) {
                    JOptionPane.showMessageDialog(jPanel10,"It is a tie.");
                }
                break;
        }
    }//GEN-LAST:event_jPanel7MouseClicked

    private void jPanel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel8MouseClicked
        // TODO add your handling code here:
        clearDraw(jPanel8);
        
        panel = "jp8";
        
        CircleComponent cir = new CircleComponent(80);
        XComponent xcom = new XComponent();
        if (turn == 'O') {
            jPanel8.add(cir);
            c2 = 'O';
        }
        else if (turn == 'X') {
            jPanel8.add(xcom);
            c2 = 'X';
            timec2 = new Timestamp (Calendar.getInstance().getTime().getTime());
        }
        
        jPanel8.revalidate();
        jPanel8.repaint();
        CheckWin();
        switch (numberP) {
            case "2":
                if (turn == 'X') {
                    turn = 'O';
                }
                else if (turn == 'O') {
                    turn = 'X';
                }
                if (win == false) {
                    if (turn == 'X') {
                        JOptionPane.showMessageDialog(jPanel5,"It is " + p1 + "'s turn.");
                    }
                    else if (turn == 'O') {
                        JOptionPane.showMessageDialog(jPanel5,"It is " + p2 + "'s turn.");
                    }
                }
                break;
            case "1":
                String move = "";
                if (diffic.equals("med")) {
                    AIplayerMed ai = new AIplayerMed (a1, a2, a3, b1, b2, b3, c1, c2, c3);
                    move = ai.BestMove();
                }
                else if (diffic.equals("easy")) {
                    AIplayerEasy ai2 = new AIplayerEasy (a1, a2, a3, b1, b2, b3, c1, c2, c3);
                    move = ai2.BestMove();
                }
                else if (diffic.equals("hard")) {
                    AIplayerHard ai3 = new AIplayerHard (a1, a2, a3, b1, b2, b3, c1, c2, c3, timea1, timea2, timea3, timeb1, timeb2, timeb3, timec1, timec2, timec3);
                    move = ai3.BestMove();
                }
                
                if (move.equals("a1")) {
                    a1 = 'O';
                    jPanel1.add(cir);
                    jPanel1.revalidate();
                    jPanel1.repaint();
                    timea1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("a2")) {
                    a2 = 'O';
                    jPanel2.add(cir);
                    jPanel2.revalidate();
                    jPanel2.repaint();
                    timea2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("a3")) {
                    a3 = 'O';
                    jPanel3.add(cir);
                    jPanel3.revalidate();
                    jPanel3.repaint();
                    timea3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b1")) {
                    b1 = 'O';
                    jPanel4.add(cir);
                    jPanel4.revalidate();
                    jPanel4.repaint();
                    timeb1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b2")) {
                    b2 = 'O';
                    jPanel5.add(cir);
                    jPanel5.revalidate();
                    jPanel5.repaint();
                    timeb2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b3")) {
                    b3 = 'O';
                    jPanel6.add(cir);
                    jPanel6.revalidate();
                    jPanel6.repaint();
                    timeb3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c1")) {
                    c1 = 'O';
                    jPanel7.add(cir);
                    jPanel7.revalidate();
                    jPanel7.repaint();
                    timec1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c2")) {
                    c2 = 'O';
                    jPanel8.add(cir);
                    jPanel8.revalidate();
                    jPanel8.repaint();
                    timec2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c3")) {
                    c3 = 'O';
                    jPanel9.add(cir);
                    jPanel9.revalidate();
                    jPanel9.repaint();
                    timec3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("full")) {
                    
                }
                turn = 'O';
                if (win == false) {
                    CheckWin();
                }
                turn = 'X';
                if (move.equals("full") && win == false) {
                    JOptionPane.showMessageDialog(jPanel10,"It is a tie.");
                }
                break;
        }
    }//GEN-LAST:event_jPanel8MouseClicked

    private void jPanel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel9MouseClicked
        // TODO add your handling code here:
        clearDraw(jPanel9);
        
        panel = "jp9";
        CircleComponent cir = new CircleComponent(80);
        XComponent xcom = new XComponent();
        if (turn == 'O') {
            jPanel9.add(cir);
            c3 = 'O';
        }
        else if (turn == 'X') {
            jPanel9.add(xcom);
            c3 = 'X';
            timec3 = new Timestamp (Calendar.getInstance().getTime().getTime());
        }
        jPanel9.revalidate();
        jPanel9.repaint();
        CheckWin();
        switch (numberP) {
            case "2":
                if (turn == 'X') {
                    turn = 'O';
                }
                else if (turn == 'O') {
                    turn = 'X';
                }
                if (win == false) {
                    if (turn == 'X') {
                        JOptionPane.showMessageDialog(jPanel5,"It is " + p1 + "'s turn.");
                    }
                    else if (turn == 'O') {
                        JOptionPane.showMessageDialog(jPanel5,"It is " + p2 + "'s turn.");
                    }
                }
                break;
            case "1":
                String move = "";
                if (diffic.equals("med")) {
                    AIplayerMed ai = new AIplayerMed (a1, a2, a3, b1, b2, b3, c1, c2, c3);
                    move = ai.BestMove();
                }
                else if (diffic.equals("easy")) {
                    AIplayerEasy ai2 = new AIplayerEasy (a1, a2, a3, b1, b2, b3, c1, c2, c3);
                    move = ai2.BestMove();
                }
                else if (diffic.equals("hard")) {
                    AIplayerHard ai3 = new AIplayerHard (a1, a2, a3, b1, b2, b3, c1, c2, c3, timea1, timea2, timea3, timeb1, timeb2, timeb3, timec1, timec2, timec3);
                    move = ai3.BestMove();
                }
                
                if (move.equals("a1")) {
                    a1 = 'O';
                    jPanel1.add(cir);
                    jPanel1.revalidate();
                    jPanel1.repaint();
                    timea1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("a2")) {
                    a2 = 'O';
                    jPanel2.add(cir);
                    jPanel2.revalidate();
                    jPanel2.repaint();
                    timea2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("a3")) {
                    a3 = 'O';
                    jPanel3.add(cir);
                    jPanel3.revalidate();
                    jPanel3.repaint();
                    timea3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b1")) {
                    b1 = 'O';
                    jPanel4.add(cir);
                    jPanel4.revalidate();
                    jPanel4.repaint();
                    timeb1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b2")) {
                    b2 = 'O';
                    jPanel5.add(cir);
                    jPanel5.revalidate();
                    jPanel5.repaint();
                    timeb2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("b3")) {
                    b3 = 'O';
                    jPanel6.add(cir);
                    jPanel6.revalidate();
                    jPanel6.repaint();
                    timeb3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c1")) {
                    c1 = 'O';
                    jPanel7.add(cir);
                    jPanel7.revalidate();
                    jPanel7.repaint();
                    timec1 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c2")) {
                    c2 = 'O';
                    jPanel8.add(cir);
                    jPanel8.revalidate();
                    jPanel8.repaint();
                    timec2 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("c3")) {
                    c3 = 'O';
                    jPanel9.add(cir);
                    jPanel9.revalidate();
                    jPanel9.repaint();
                    timec3 = new Timestamp (Calendar.getInstance().getTime().getTime());
                }
                else if (move.equals("full")) {
                    
                }
                turn = 'O';
                if (win == false) {
                    CheckWin();
                }
                turn = 'X';
                if (move.equals("full") && win == false) {
                    JOptionPane.showMessageDialog(jPanel10,"It is a tie.");
                }
                break;
        }
    }//GEN-LAST:event_jPanel9MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        clearDraw(jPanel1);
        clearDraw(jPanel2);
        clearDraw(jPanel3);
        
        clearDraw(jPanel4);
        clearDraw(jPanel5);
        clearDraw(jPanel6);
        
        clearDraw(jPanel7);
        clearDraw(jPanel8);
        clearDraw(jPanel9);
        
        if (!(a1 == 'S' && a2 == 'S' && a3 == 'S' && b1 == 'S' && b2 == 'S' && b3 == 'S' && c1 == 'S' && c2 == 'S' && c3 == 'S') ) {
            gameCount += 1;
            jLabel1.setText("Game Count: " + gameCount);
            tieCount = gameCount - (winP1 + winP2);
            jLabel5.setText("Tie Count: " + tieCount);
        }
        
        a1 = 'S';
        a2 = 'S';
        a3 = 'S';
        
        b1 = 'S';
        b2 = 'S';
        b3 = 'S';
        
        c1 = 'S';
        c2 = 'S';
        c3 = 'S';
        
        timea1 = new Timestamp (0);
        timea2 = new Timestamp (0);
        timea3 = new Timestamp (0);
    
        timeb1 = new Timestamp (0);
        timeb2 = new Timestamp (0);
        timeb3 = new Timestamp (0);
    
        timec1 = new Timestamp (0);
        timec2 = new Timestamp (0);
        timec3 = new Timestamp (0);
        
        jLabel2.setText(p1 + ": " + winP1);
        jLabel3.setText(p2 + ": " + winP2);
        win = false;
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
        
        String str = (String) jComboBox1.getSelectedItem();
        
        if (str.equals("Easy")) {
            diffic = "easy";
        }
        else if (str.equals("Medium")) {
            diffic = "med";
        }
        else if (str.equals("Insane")) {
            diffic = "hard";
        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         * Windows Vista
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TicTacToeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TicTacToeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TicTacToeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TicTacToeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new TicTacToeGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

    char a1 = 'S';
    char a2 = 'S';
    char a3 = 'S';
    
    char b1 = 'S';
    char b2 = 'S';
    char b3 = 'S';
    
    char c1 = 'S';
    char c2 = 'S';
    char c3 = 'S';
    
    Timestamp timea1 = new Timestamp (0);
    Timestamp timea2 = new Timestamp (0);
    Timestamp timea3 = new Timestamp (0);
    
    Timestamp timeb1 = new Timestamp (0);
    Timestamp timeb2 = new Timestamp (0);
    Timestamp timeb3 = new Timestamp (0);
    
    Timestamp timec1 = new Timestamp (0);
    Timestamp timec2 = new Timestamp (0);
    Timestamp timec3 = new Timestamp (0);
    
    char turn = 'X';
    String p1 = "";
    String p2 = "";
    String panel; 
    
    String numberP;
    String diffic = "med";
    
    boolean win = false;
    int winP1;
    int winP2;
    int gameCount;
    int tieCount;
    int linecount;
    
    int indexfound;
    
    
    /**
     * Checks if there is a win.
     */
    private void CheckWin () {
        if (win == false) {
            if (turn == 'X') {
                if (a1 == 'X' && a2 == 'X' && a3 == 'X') {
                    winP1 +=1;
                    JOptionPane.showMessageDialog(jPanel10,"Winner: " + p1);
                    win = true;
                }
                else if (b1 == 'X' && b2 == 'X' && b3 == 'X') {
                    winP1 +=1;
                    JOptionPane.showMessageDialog(jPanel10,"Winner: " + p1);
                    win = true;
                }
                else if (c1 == 'X' && c2 == 'X' && c3 == 'X') {
                    winP1 +=1;
                    JOptionPane.showMessageDialog(jPanel10,"Winner: " + p1);
                    win = true;
                }
                else if (a1 == 'X' && b1 == 'X' && c1 == 'X') {
                    winP1 +=1;
                    JOptionPane.showMessageDialog(jPanel10,"Winner: " + p1);
                    win = true;
                }
                else if (a2 == 'X' && b2 == 'X' && c2 == 'X') {
                    winP1 +=1;
                    JOptionPane.showMessageDialog(jPanel10,"Winner: " + p1);
                    win = true;
                }
                else if (a3 == 'X' && b3 == 'X' && c3 == 'X') {
                    winP1 +=1;
                    JOptionPane.showMessageDialog(jPanel10,"Winner: " + p1);
                    win = true;
                }
                else if (a1 == 'X' && b2 == 'X' && c3 == 'X') {
                    winP1 +=1;
                    JOptionPane.showMessageDialog(jPanel10,"Winner: " + p1);
                    win = true;
                }
                else if (a3 == 'X' && b2 == 'X' && c1 == 'X') {
                    winP1 +=1;
                    JOptionPane.showMessageDialog(jPanel10,"Winner: " + p1);
                    win = true;
                }
                else if ( (a1 == 'X' || a1 == 'O') && (a2 == 'X' || a2 == 'O') && (a3 == 'X' || a3 == 'O') &&
                       (b1 == 'X' || b1 == 'O') && (b2 == 'X' || b2 == 'O') && (b3 == 'X' || b3 == 'O') &&
                       (c1 == 'X' || c1 == 'O') && (c2 == 'X' || c2 == 'O') && (c3 == 'X' || c3 == 'O') ) {
                    JOptionPane.showMessageDialog(jPanel10,"It is a tie.");
                    win = true;
                }
            }
            else if (turn == 'O') {
                if (a1 == 'O' && a2 == 'O' && a3 == 'O') {
                    winP2 +=1;
                    JOptionPane.showMessageDialog(jPanel10,"Winner: " + p2);
                    win = true;
                }
                else if (b1 == 'O' && b2 == 'O' && b3 == 'O') {
                    winP2 +=1;
                    JOptionPane.showMessageDialog(jPanel10,"Winner: " + p2);
                    win = true;
                }
                else if (c1 == 'O' && c2 == 'O' && c3 == 'O') {
                    winP2 +=1;
                    JOptionPane.showMessageDialog(jPanel10,"Winner: " + p2);
                    win = true;
                }
                else if (a1 == 'O' && b1 == 'O' && c1 == 'O') {
                    winP2 +=1;
                    JOptionPane.showMessageDialog(jPanel10,"Winner: " + p2);
                    win = true;
                }
                else if (a2 == 'O' && b2 == 'O' && c2 == 'O') {
                    winP2 +=1;
                    JOptionPane.showMessageDialog(jPanel10,"Winner: " + p2);
                    win = true;
                }
                else if (a3 == 'O' && b3 == 'O' && c3 == 'O') {
                    winP2 +=1;
                    JOptionPane.showMessageDialog(jPanel10,"Winner: " + p2);
                    win = true;
                }
                else if (a1 == 'O' && b2 == 'O' && c3 == 'O') {
                    winP2 +=1;
                    JOptionPane.showMessageDialog(jPanel10,"Winner: " + p2);
                    win = true;
                }
                else if (a3 == 'O' && b2 == 'O' && c1 == 'O') {
                    winP2 +=1;
                    JOptionPane.showMessageDialog(jPanel10,"Winner: " + p2);
                    win = true;
                }
                else if ( (a1 == 'X' || a1 == 'O') && (a2 == 'X' || a2 == 'O') && (a3 == 'X' || a3 == 'O') &&
                       (b1 == 'X' || b1 == 'O') && (b2 == 'X' || b2 == 'O') && (b3 == 'X' || b3 == 'O') &&
                       (c1 == 'X' || c1 == 'O') && (c2 == 'X' || c2 == 'O') && (c3 == 'X' || c3 == 'O') ) {
                    JOptionPane.showMessageDialog(jPanel10,"It is a tie.");
                    win = true;
                }
            }
            
            
        }
    }
    /**
     * Clears a jPanel
     * @param jp1 a jPanel
     */
    public void clearDraw (javax.swing.JPanel jp1) {
        jp1.removeAll();
        jp1.revalidate();
        jp1.repaint();
    }
    
    private void ReadUserStats () {
        //The file line is P1, Computer, Game Count
                
        int length = p1.length();
        String [] parts;
        try {
            String stringSearch = p1;
            // Open the file c:\test.txt as a buffered reader
            BufferedReader bf = new BufferedReader(new FileReader("users.txt"));

            // Start a line count and declare a string to hold our current line.
            linecount = 0;
                String line;

            // Loop through each line, stashing the line into our line variable.
            while (( line = bf.readLine()) != null){
                // Increment the count and find the index of the word
                linecount++;
                indexfound = line.indexOf(stringSearch);
                
                // If greater than -1, means we found the word
                if (indexfound > -1) {
                    parts = line.split(" ");
                    String P1wins = parts[1];
                    winP1 = Integer.parseInt(P1wins);
                    jLabel2.setText(p1 + ": " + winP1);
                    
                    
                    String P2wins = parts[2];
                    winP2 = Integer.parseInt(P2wins);
                    jLabel3.setText("Computer: " + winP2);
                    
                    
                    String GameCount = parts[3];
                    gameCount = Integer.parseInt(GameCount);
                    jLabel1.setText("Gamecount: " + gameCount);
                    
                    tieCount = gameCount - (winP1 + winP2);
                    jLabel5.setText("Ties: " + tieCount);
                }
            }

            // Close the file after done searching
            bf.close();
        }
        catch (IOException e) {
            System.out.println("IO Error Occurred: " + e.toString());
        }
    }
    
    private void WriteUserStats () {
        int index2 = 0;
        int index3 = 0;
        try {
            List<List<String>> data = new ArrayList<>(); 
            try (Scanner in = new Scanner(new FileReader("users.txt"))) {
                while (in.hasNextLine()) {
                    String line = in.nextLine();
                    index2 ++;
                    System.out.println("index2: " + index2);
                    try (Scanner lineScanner = new Scanner(line)) {
                        ArrayList<String> array = new ArrayList<>();
                        while (lineScanner.hasNext()) {
                            array.add(lineScanner.next());
                            index3 ++;
                            System.out.println("index3: " + index3);
                        }
                        data.add(array);
                    }
                }
                if (in.ioException() != null) {  
                }
            }
            int lineNumber = 0;
            int size = data.size();
            while(size > 0) {
                if (data.get(lineNumber).get(0).equalsIgnoreCase(p1)) {
                    data.get(lineNumber).set(1,winP1 + "");
                    data.get(lineNumber).add(2,winP2 + "");
                    data.get(lineNumber).add(3,gameCount + "");
                }
                lineNumber ++;
                size --;
                System.out.println(lineNumber + " " + size);
            }
            
//            String str = data.get(0).get(0) + " " + data.get(0).get(1);
//            System.out.println(str);
//            str = data.get(1).get(0) + " " + data.get(1).get(1) + " " + data.get(1).get(2) + " " + data.get(1).get(3);
//            System.out.println(str);
//            str = data.get(2).get(0) + " " + data.get(2).get(1) + " " + data.get(2).get(2) + " " + data.get(2).get(3);
//            System.out.println(str);
//            str = data.get(3).get(0) + " " + data.get(3).get(1) + " " + data.get(3).get(2) + " " + data.get(3).get(3);
//            System.out.println(str);
//            str = data.get(4).get(0) + " " + data.get(4).get(1) + " " + data.get(4).get(2) + " " + data.get(4).get(3);
//            System.out.println(str);
            
            BufferedWriter bf = null;
            
            File temp = new File ("temp.txt");
            File users = new File ("users.txt");
            
            try {
                bf = new BufferedWriter (new FileWriter(temp, false));
            } catch (IOException ex) {
                Logger.getLogger(TicTacToeGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            int length = data.size() -1;
            int index = 1;
            bf.write(data.get(0).get(0) + " " + data.get(0).get(1));
            bf.newLine();
            while (length > 0) {
                bf.write(data.get(index).get(0) + " " + data.get(index).get(1) + " " + data.get(index).get(2) + " " + data.get(index).get(3));
                bf.newLine();
                index ++;
                length --;
            }
            bf.close();
            
            boolean delete = users.delete();
            Path source = FileSystems.getDefault().getPath("", "temp.txt");
            Path move = Files.move(source, source.resolveSibling("users.txt"));
            
        } catch (IOException ex) {
            Logger.getLogger(TicTacToeGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}